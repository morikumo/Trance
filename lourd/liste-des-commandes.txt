Pour le  faire manuellement :

- Etape 1 : Creer le dossier soit meme sans passer par nest car on a pas les droits.

>> mkdir mon-projet-nest
>> cd mon-projet-nest

- Etape 2: Passer par node.js pour avoir npm >> nest.

- Etape 3: Installation de npm (ou yarn mais je prefere npm)

- Etape 4: Creation des fichiers du projet

>> npm init -y (Va nous creer un fichier package.json pour le bon fonctionnement de l'api)

- Etape 5: Installation des dépendances manuellement

>> npm install --save @nestjs/core @nestjs/common rxjs reflect-metadata
>> npm install --save-dev typescript ts-node

- Etape 6 : Configuration de TypeScript

(A mettre dans le fichier tsconfig.json qui est a creer aussi)

```
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "target": "ES6"
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}
```

- Étape 7 : Création de fichiers sources et ecritures des modulues/controlleur/service 

(RECUPERER LE MODELE QUE NEST FAIT DEJA, VOIR DOC NEST PAR EXEMPLE)

>> mkdir src
>> touch app.controller.ts app.service.ts app.module.ts main.ts

app.module.ts :

// app.module.ts
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';

@Module({
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

app.controller.ts : 

// src/app.controller.ts
import { Controller, Get } from '@nestjs/common';

@Controller()
export class AppController {
  @Get()
  getHello(): string {
    return 'Hello World!';
  }
}

app.service.ts :

// src/app.service.ts
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World from the service!';
  }
}


(FAIRE ATTENTION AU TSCONFIG.TS SINON IL NE RECONNAIS PAS LES DECORATEUR @MODULE ou @INJECTABLE)

- Etape 8 : Ecriture du code nest.js a commencer avec USER

(Creer les repertoires necessaires pour l'api,pour nous USER)

>> mkdir USER
>> cd user 
>> touch user.controller.ts user.service.ts user.module.ts main.ts

- Etape 9 : Execution de l'application (manuellement pour tester)

>> node dist/main.ts

- Etape 10 : Créer un module d'authentification

>> cd src
>> mkdir auth
>> touch auth.module.ts auth.service.ts auth.controller.ts

- Etape 11 : Installation des dépendances liée à l'authentification

>> npm install --save @nestjs/jwt passport passport-jwt
>> npm install --save @nestjs/passport

(Remplir le code de chaque fichier auth)

- Etape 12 : Création d'un fichier (jwt-auth.guard.ts) pour protéger les routes

>> touch jwt-auth.guard.ts

(Il devra etre remplie selon les routes a protéger qu'elles soient coté authentification que user)

- Etape 13 : Créer un module user

>> cd src
>> mkdir user
>> touch user.module.ts user.service.ts user.controller.ts

(Dans le controlleur il a été ajouter un protecteur de route pour le user aussi)

- Etape 14 : Probleme avec express il faut donc ajouter des dependences express a ajouter au package.json, pour cela :

>> npm install --save-dev @types/express

(Save-dev va les mettres directement dans le fichier json)

(On s'assure que les types de declarations sont bien installer)

>> npm install --save @types/express @types/jsonwebtoken

(On creer un fichier express.d.ts pour gerer le request pour qu'il puisse prendre un 'any')

>> touch express.d.ts (dans lequel on mettra)

```
declare module 'express' {
  interface Request {
    user: any; // Remplacez 'any' par le type de votre utilisateur si possible
  }
}
```

Enfin on ajoute au fichier de declaration personnaliser pour rendre le tout accessible

(Dans le fichier tsconfig.json)

```
(On va dans la section include et on ajoute :)

"include": ["src/**/*.ts", "custom.d.ts"]
```

- Etape 15 : On precede doucement a la base donnees

>> npm install prisma --save-dev
>> npx prisma init --datasource-provider sqlite (Recuperer sur le site de prisma)

Ajout d'un 'model' dans schema.prisma , le model user pour creer une base de donnes user

J'ai ensuite ajouter des model pour 'post' (publications) et auth (authentification) qui permettera d'avoir tout ca en db

* Etape 15.5 : On creer des fichier post.***.ts pour gerer les publications a travers les module deja existant

>> cd src/user/
>>  touch auth/post.controller.ts auth/post-auth.guard.ts user/post.controller.ts user/post.service.ts user/post.module.ts

(On remplira le code de chacun)

>> npx prisma generate (Pour mettre a jour chaque fois que le code liee a la base de donne change)

- Etape 16 : Ajout d'un dossier dto dans auth, un fichier constant pour le bon fonctionnement de l'auth avec les ajout dans les modules auth en rapport avec la base de donnee

- Etape 17 : Probleme avec la methode findByEmail avec auth.service.ts

(Par consequant je dois ajouter des fichier au modules prisma soit prsima.service.ts et prisma.module.ts)

>> cd prisma 
>> touch prisma.service.ts prisma.module.ts

(VOIR PROBLEME SUR USER.SERVICE.TS ET PRISMA.SERVICE.TS)