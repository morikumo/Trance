Pour le  faire manuellement :

- Etape 1 : Creer le dossier soit meme sans passer par nest car on a pas les droits.

>> mkdir mon-projet-nest
>> cd mon-projet-nest

- Etape 2: Passer par node.js pour avoir npm >> nest.

- Etape 3: Installation de npm (ou yarn mais je prefere npm)

- Etape 4: Creation des fichiers du projet

>> npm init -y (Va nous creer un fichier package.json pour le bon fonctionnement de l'api)

- Etape 5: Installation des dépendances manuellement

>> npm install --save @nestjs/core @nestjs/common rxjs reflect-metadata
>> npm install --save-dev typescript ts-node

- Etape 6 : Configuration de TypeScript

(A mettre dans le fichier tsconfig.json qui est a creer aussi)

```
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "target": "ES6"
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}
```

- Étape 7 : Création de fichiers sources et ecritures des modulues/controlleur/service 

(RECUPERER LE MODELE QUE NEST FAIT DEJA, VOIR DOC NEST PAR EXEMPLE)

>> mkdir src
>> touch app.controller.ts app.service.ts app.module.ts main.ts

app.module.ts :

// app.module.ts
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';

@Module({
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

app.controller.ts : 

// src/app.controller.ts
import { Controller, Get } from '@nestjs/common';

@Controller()
export class AppController {
  @Get()
  getHello(): string {
    return 'Hello World!';
  }
}

app.service.ts :

// src/app.service.ts
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World from the service!';
  }
}


(FAIRE ATTENTION AU TSCONFIG.TS SINON IL NE RECONNAIS PAS LES DECORATEUR @MODULE ou @INJECTABLE)

- Etape 8 : Ecriture du code nest.js a commencer avec USER

(Creer les repertoires necessaires pour l'api,pour nous USER)

>> mkdir USER
>> cd user 
>> touch user.controller.ts user.service.ts user.module.ts main.ts

- Etape 9 : Execution de l'application (manuellement pour tester)

>> node dist/main.ts

- Etape 10 : Créer un module d'authentification

>> cd src
>> mkdir auth
>> touch auth.module.ts auth.service.ts auth.controller.ts

- Etape 11 : Installation des dépendances liée à l'authentification

>> npm install --save @nestjs/jwt passport passport-jwt
>> npm install --save @nestjs/passport

(Remplir le code de chaque fichier auth)

- Etape 12 : Création d'un fichier (jwt-auth.guard.ts) pour protéger les routes

>> touch jwt-auth.guard.ts

(Il devra etre remplie selon les routes a protéger qu'elles soient coté authentification que user)

- Etape 13 : Créer un module user

>> cd src
>> mkdir user
>> touch user.module.ts user.service.ts user.controller.ts

(Dans le controlleur il a été ajouter un protecteur de route pour le user aussi)

- Etape 14 : Probleme avec express il faut donc ajouter des dependences express a ajouter au package.json, pour cela :

>> npm install --save-dev @types/express

(Save-dev va les mettres directement dans le fichier json)

(On s'assure que les types de declarations sont bien installer)

>> npm install --save @types/express @types/jsonwebtoken

(On creer un fichier express.d.ts pour gerer le request pour qu'il puisse prendre un 'any')

>> touch express.d.ts (dans lequel on mettra)

```
declare module 'express' {
  interface Request {
    user: any; // Remplacez 'any' par le type de votre utilisateur si possible
  }
}
```

Enfin on ajoute au fichier de declaration personnaliser pour rendre le tout accessible

(Dans le fichier tsconfig.json)

```
(On va dans la section include et on ajoute :)

"include": ["src/**/*.ts", "custom.d.ts"]
```

- Etape 15 : On precede doucement a la base donnees

>> npm install prisma --save-dev
>> npx prisma init --datasource-provider sqlite (Recuperer sur le site de prisma)

Ajout d'un 'model' dans schema.prisma , le model user pour creer une base de donnes user

J'ai ensuite ajouter des model pour 'post' (publications) et auth (authentification) qui permettera d'avoir tout ca en db

* Etape 15.5 : On creer des fichier post.***.ts pour gerer les publications a travers les module deja existant

>> cd src/user/
>>  touch auth/post.controller.ts auth/post-auth.guard.ts user/post.controller.ts user/post.service.ts user/post.module.ts

(On remplira le code de chacun)

>> npx prisma generate (Pour mettre a jour chaque fois que le code liee a la base de donne change)

- Etape 16 : Ajout d'un dossier dto dans auth, un fichier constant pour le bon fonctionnement de l'auth avec les ajout dans les modules auth en rapport avec la base de donnee

- Etape 17 : Probleme avec la methode findByEmail avec auth.service.ts

(Par consequant je dois ajouter des fichier au modules prisma soit prsima.service.ts et prisma.module.ts)

>> cd prisma 
>> touch prisma.service.ts prisma.module.ts

(Il faut maintenant ajouter a l'include de tsconfig.ts un partie pour la recuperation des dependances prisma soit :)

*Dans le fichier tsconfig.ts a la section include*

>> [...,"prisma/**/*.ts"]

Etape 18 : Testons tous ca ! 

(Dans un premier temps il nous manque une dependances express donc :)

>> npm install @nestjs/platform-express
>> npm run start:dev

(Ca n'as pas marcher je me suis donc tourner vers le docker-compose, on verra donc ca plus tard)

Etape 19 : Docker-compose 

(Premierement on recupere les image de postgres et nesjs/cli sur dockerhub pour avoir des images deja faites et prete)

(Ensuite on fait le docker-compose pour connecter nos services de back et de base de donnees, puis)

>> docker-compose up

Etape 20 : Revenons a nos moutons

(Le grand probleme est regler grace a la doc de nestjs, maintenant on peut lancer le serveur et tester les routes. !PAR CONTRE IL NE FONCTION QU'AVEC LE DOCKER COMPOSE CAR CONTIENT L'IMAGE DE POSTGRES!)

Etape 21 on essaie tout ca donc dans cette ordre : 

>> docker-compose up --build
>> npm run start:dev
>> npx prisma studio

Etape 22 : Probleme avec la connectiviter de la base de donnee , probleme citer sur prisma studio

(Lorsque l'on se connecte avec prisma studio pour une interface graphique de la db, il nous parle d'un probleme de recuperation liee a l'output donc :)

On ajoute dans le fichier prisma.schema le code suivant :

>> generator client {
  >> provider = "prisma-client-js"
  >> output   = "../node_modules/.prisma/client"
}

Pour recuperer les dependances prisma-client-js et information client

Puis un soucis de env est apparue donc on a du ajouter la dependences dotenv

>> npm install dotenv

Maintenant on peut lancer le serveur et tester les routes. !PAR CONTRE IL NE FONCTION QU'AVEC LE DOCKER COMPOSE CAR CONTIENT L'IMAGE DE POSTGRES!

>> npx prisma generate
>> npx prisma migrate dev --name init
>> npx prisma studio

Etape 23 : On ajoute dans main.ts des elements pour gerer le .env

>> import { config } from 'dotenv';
>> config();

Etape 24 : il me manquait des dependances liee a postgres donc  :

>> npm install pg 
>> npm ci (mets a jours les depandances)

Etape 25 : Le probleme de la recuperation de l'env par prisma persistent, de plus l'api ne se lance plus

(Liste des problemes :

- Prisma ne recupere pas l'env
- L'api ne se lance plus)

(L'api ne se lancait plus parce qu'elle n'arrivait pas a recuperer le prisma/client, car lorsque l'on faisait npx prisma generate generait le client a un endroit citer a cause de l'output, je l'ai donc enlever et j'ai supprimer le node_modules creer par npx prisma generete et laisser l'original)

(Ce probleme etant regler j'essaie de lancer l'api mais avant il faut migrer nos changement avec npx prisma migrate dev, or il y a un probleme, il ne recupere pas l'env)

(Nous avons donc 2 probleme en 1, il faut reussir a connecter l'env pour le lancement de l'api)

(L'api se lance mais le probleme persistent avec prisma studio, donc de retour au meme probleme d'env)


Etape 26 : On veut toujours regler le soucis de l'env on a donc opter pour un dockerfile

(Changement dans docker-compose. IMPORTANT NE PAS APPELLER UN SERVICE DANS LE DOCKERFILE AVEC UNE MAJUSCULE SINON CA NE SE LANCE PAS, JE GALERE DEPUIS UN MOMENT RIEN QUE POUR CA)

Etape 27 : On ajoute a schema.prisma une ligne pour les binaryTarget pour que les runtime de prisma soit compatible avec le runtime de node

>> binaryTargets = ["native"]
>> binaryTargets = ["native", "linux-musl-openssl-3.0.x"] // Pour linux, l'erreur persistait donc on ajoute cette ligne, (Pas obligatoire pour le moment)

Etape 28 : Le probleme viendrai du fait du user ou l'on utilise findMany visiblement il ne le reconnait pas, il faut donc le changer par findUnique

(On va essayer de passer par un script pour enclencher le processus de recuperation de l'env via prisma en faisant migrant les elements juste avant le lancement de celui-ci)

Etape 29 : On a reussi a lancer l'api avec le dockerfile, le probleme de l'env est regler ENFIN 
(Des explications doivent etre faites pour bien expliquer le processus)

(On va proceder a des explication par étape :

- Etape 1 : On est revenu a l'idée du script pour faire fonctionner l'api 

>> mkdir script
>> touch script.ts

A l'intérieur on mettra le code suivant :

>> npx prisma generate -schema=../prisma/schema.prisma
>> npm run start:dev
>> npx prisma migrate dev --schema=../prisma/schema.prisma


- Etape 2 : On va donc modifier le dockerfile pour qu'il puisse lancer le script

Dans le dockerfile on va ajouter :

>> ENTRYPOINT ["sh", "/script.sh"]

Parce qu'aprés avoir copier l'environnement de l'api dans le conteneur, on va lancer le script qui va lancer l'api

- Etape 3 : On met le dockerfile au meme endroit que le docker-compose pour evité les corrélations:

Le grand probleme de l'env était que j'avais plusieurs package.json et plusieurs node_modules. Et comme dans le conteneur on trouvais le meme environnement
que sur ma machine il ne trouvais pas les dependances, il fallait donc que je mette le dockerfile au meme endroit que le docker-compose pour que le conteneur.
Mais encore les dépendances était enmelé dans le conteneur comme sur ma machine. Pendant longtemps j'ai cru que c'était docker ou prisma le probleme, mais enfaite
c'était lors de mes manipulations de npx et du mauvais path de sript et nombreuses erreur que j'ai créées des package.json a tout va et des node_modules a tout va.
Il se référait donc au mauvais package de dépendances. J'ai donc supprimer les package.json et node_modules qui n'était pas utile et j'ai mis le dockerfile
au meme endroit que le docker-compose pour que le conteneur puisse trouver les dépendances.

- Etape 4 : On va donc modifier le docker-compose pour qu'il puisse lancer le script

Léger changement dans le docker-compose pour qu'il puisse trouver les path corectement

- Etape 5 : On va donc modifier le script pour qu'il puisse lancer l'api

IL FAUT BIEN QUE POUR LE MOMENT LES MIGRATIONS OIT FAITES APRES NPM RUN START:DEV

Il faut donc que le conteneur soit actif, pour le moment c'est fait de manière manuel mais on va essayer de l'incorporer au script)

Etape 30 : On va crééer un makefile pour automatiser le tout pour facilité le tout

(On va donc creer un fichier makefile a la racine du projet)

(On va automatiser la migrations de depandances prisma aussi,  ainsi que l'automatisation de docker)

(Voila qui est fait avec notre makefile)

Etape 31 : On passe a la partie service de nos user et commencer l'authentification

(Alors la connexion a notre page web fut difficile le tout a cause du app.module qui n'avait pas les bon contrller/provider/module)

J'ai ajouté des dependances :

>> npm install --save qrcode
>> npm install --save otplib
>> npm install --save path
>> npm install --save @nestjs/serve-static
>> npm install --save 

Etape 32 : Ca fait longtemps que je nai aps écrit ici. Le probleme était que j'ai des doubles requetes avec Google Chrome

(Vous l'avez compris, il faut passer sur mozilla pour tester l'api)

Etape 33 : Un probleme de dbe st fait depuis le depart, car il faut le lancer dans le conteneur

(Il fallait donc changer l'url de la db et changer la partie localhost par la partie postgre ou le nom du conteneur gérant la db)

Etape 34 : Probleme avec patch 

(curl -X PATCH http://localhost:3001/user/setNickname \
-H "Content-Type: application/json" \
-H "Authorization: Bearer YOUR_TOKEN_HERE" \
-d '{"nickname": "newNickname"}'
)

Faire cette commande pour tester la requete 


PATCH ne fonctionnera pas sans un formulaire front, on va donc passer par le back avec get, car res.redirect retourne toujours un get.
Or on a une erreur Unautorized de la part de JWT, qui 